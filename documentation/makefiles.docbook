<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY project "<literal>Theos</literal>">
]>
<chapter>
  <title>Makefiles</title>

  <section id="intro">
    <title>Introduction</title>

    <para>&project; is a set of Makefiles designed to take away the complexity
    of building and organizing iPhoneOS projects without the use of Xcode (or
    even Mac OS X.)</para>
  </section>

  <section id="structure">
    <title>Structure of a Makefile</title>

    <para>Here is an example makefile for a project using &project;</para>

    <programlisting>TWEAK_NAME = Simple
Simple_OBJCC_FILES = Tweak.mm

include theos/makefiles/common.mk
include theos/makefiles/tweak.mk</programlisting>
  </section>

  <section id="project-types">
    <title>Project Types</title>

    <para>Projects are divided into different types, briefly described below.
    To create a project of a given type, simply include its makefile. For
    example, to create a command-line tool:</para>

    <programlisting>include theos/makefiles/tool.mk</programlisting>

    <para>From one Makefile, you can build multiple types of project (just
    include both project type makefiles). An example:</para>

    <programlisting>TWEAK_NAME = Simple
Simple_OBJCC_FILES = Tweak.mm

TOOL_NAME = simpleutility
simpleutility_C_FILES = su.c

include theos/makefiles/common.mk
include theos/makefiles/tweak.mk
include theos/makefiles/tool.mk</programlisting>

    <para>You can also build multiple instances of a single project type from
    one Makefile.</para>

    <programlisting>TWEAK_NAME = Simple Complex
Simple_OBJCC_FILES = Tweak.mm
Complex_OBJCC_FILES = 1.mm 2.mm 3.mm 4.mm

include theos/makefiles/common.mk
include theos/makefiles/tweak.mk</programlisting>

    <section>
      <title>Aggregate (<literal>aggregate.mk</literal>)</title>

      <para>An Aggregate project is a project that consists of several
      subprojects. Each subproject can be any valid type (including another
      Aggregate).</para>

      <variablelist>
        <varlistentry>
          <term>Variable: <literal>SUBPROJECTS</literal></term>

          <listitem>
            <para><literal>The SUBPROJECTS</literal> variable defines the
            directory names that contain the subprojects this Aggregate
            project should build.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>UIKit Applications (<literal>application.mk</literal>)</title>

      <para>An application is an Objective-C program that includes a GUI
      component, and by default links against <literal>UIKit</literal>.</para>
    </section>

    <section>
      <title>Command Line Tools (<literal>tool.mk</literal>)</title>

      <para>A tool is a program that does not have a GUI component, and does
      not link against UIKit. This project type is intended for command-line
      tools, daemons, etc.</para>
    </section>

    <section>
      <title>MobileSubstrate Tweaks (<literal>tweak.mk</literal>)</title>

      <para>A tweak is a dynamic library that links against
      <literal>MobileSubstrate</literal> for the purposes of adding and
      replacing functions and methods at runtime.</para>

      <para>Tweaks in &project; are often written with the help of the Logos
      preprocessor.</para>

      <note>
        <para>A tweak does not, by default, link against
        <literal>UIKit</literal>. If you want to link against
        <literal>UIKit</literal>, add it to
        <literal>xxx_FRAMEWORKS</literal>.</para>
      </note>
    </section>

    <section>
      <title>Bundles (<literal>bundle.mk</literal>)</title>

      <para>A bundle is a dynamic library meant to be loaded into another
      application, using the <literal>NSBundle</literal> class.</para>
    </section>
  </section>

  <section>
    <title>Variables</title>

    <section>
      <title>System Variables</title>

      <para>These variables are listed for use in toplevel Makefiles, but if
      you really want to change them, you can.</para>

      <variablelist>
        <varlistentry>
          <term>Variable: <literal>FW_BUILD_DIR</literal></term>

          <listitem>
            <para>Build directory (objects are placed in
            <filename>$(FW_BUILD_DIR)/$(FW_OBJ_DIR_NAME)</filename>). Defaults
            to the current directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>FW_OBJ_DIR_NAME</literal></term>

          <listitem>
            <para>Output file directory name. Defaults to
            <filename>obj</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>FW_PACKAGE_STAGING_DIR</literal></term>

          <listitem>
            <para>Package staging directory. Defaults to
            <filename>$(FW_PROJECT_DIR)/_</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>CC</literal>, <literal>CXX</literal>,
          <literal>STRIP</literal>, <literal>LD</literal></term>

          <listitem>
            <para>Commands used to build and link projects.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>Project Variables</title>

      <para>The various project type makefiles all support a common set of
      variables, described below. In this list, <literal>xxx</literal> is
      assumed to be the project instance name.</para>

      <variablelist>
        <varlistentry>
          <term>Variable: <literal>xxx_C_FILES</literal>,
          <literal>xxx_CC_FILES</literal>, <literal>xxx_OBJC_FILES</literal>,
          <literal>xxx_OBJCC_FILES</literal></term>

          <listitem>
            <para>The <literal>FILES</literal> variables contain
            space-delimited lists of the source files comprising the project.
            Including <literal>OBJC_FILES</literal> or
            <literal>OBJCC_FILES</literal> causes the Objective-C runtime and
            Foundation framework to be linked with your project.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>xxx_OBJ_FILES</literal></term>

          <listitem>
            <para>The <literal>OBJ_FILES</literal> variable contains a
            space-delimited list of precompiled object files
            (<filename>.o</filename>) to be linked with the project.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>xxx_FRAMEWORKS</literal>,
          <literal>xxx_PRIVATE_FRAMEWORKS</literal></term>

          <listitem>
            <para>The <literal>FRAMEWORKS</literal> variables contain
            space-delimited lists of frameworks to link with the project, if
            Objective-C source files are used. Including
            <literal>PRIVATE_FRAMEWORKS</literal> causes the private Framework
            directory to be included in the Framework search path.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>xxx_CFLAGS</literal>,
          <literal>xxx_CCFLAGS</literal>, <literal>xxx_OBJCFLAGS</literal>,
          <literal>xxx_OBJCCFLAGS</literal></term>

          <listitem>
            <para>The <literal>FLAGS</literal> variables contain flags passed
            to the compiler for a given filetype.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>xxx_LDFLAGS</literal></term>

          <listitem>
            <para>The <literal>LDFLAGS</literal> variable contains flags
            passed to the linker for a project.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Variable: <literal>Blah</literal></term>

          <listitem>
            <para>Description</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</chapter>
